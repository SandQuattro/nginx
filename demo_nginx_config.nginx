# load balancing
upstream auth_backend {
    # we can use smthg like that: server strong.machine:<PORT1> weight=3;
    server localhost:<PORT1>;
    server localhost:<PORT2>;
    #....
}

# for websocket / sse streaming
map $http_upgrade $connection_upgrade {
  default upgrade;
  '' close;
}

server {

	root /var/www/<yourdomain>/html;

	index index.html index.htm index.nginx-debian.html;

	server_name <yourdomain> www.<yourdomain>;

    # location servicing websocket connections
    location ~ ^/(ws/upload) {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header Origin $http_host;
        proxy_set_header X-NginX-Proxy true;
        proxy_redirect off;

        proxy_http_version 1.1;
        proxy_set_header Connection "upgrade";
        proxy_set_header Upgrade "websocket";

        proxy_pass http://127.0.0.1:<PORT>;
    }

    # location servicing sso instances with load balancing
    location ~ ^/(sso/metrics|create|login|refresh|oauth|password/reset|password/reset/validate|email/verify) {
            include proxy_params;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://auth_backend;
    }

    # location servicing SSE streaming
    location ~ ^/(upload|sse) {
            proxy_set_header Connection '';
            proxy_http_version 1.1;
            proxy_pass http://127.0.0.1:<PORT>;
    }

    # location servicing some core service functionality
    location ~ ^/(core/metrics|models|results) {
            include proxy_params;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_pass http://127.0.0.1:<PORT>;
    }

    # IMPORTANT, always sending react frontend urls to /index.html
    # react router will take care of the rest
    location ~ ^/(|admin|profile) {
            try_files $uri $uri/ /index.html;
    }

    listen [::]:443 ssl ipv6only=on; 
    listen 443 ssl; 
    ssl_certificate /etc/letsencrypt/live/<yourdomain>/fullchain.pem; 
    ssl_certificate_key /etc/letsencrypt/live/<yourdomain>/privkey.pem; 
    include /etc/letsencrypt/options-ssl-nginx.conf; 
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
}

server {
    if ($host = www.<yourdomain>) {
        return 301 https://$host$request_uri;
    }

    if ($host = <yourdomain>) {
        return 301 https://$host$request_uri;
    } 

	server_name <yourdomain> www.<yourdomain>;

    listen 80;
    listen [::]:80;
    return 404; 

}